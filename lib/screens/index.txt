require('dotenv').config();
const express = require('express');
const http = require('http'); // Import http module
const WebSocket = require('ws'); // Import WebSocket
const { Connection, PublicKey, Keypair, SystemProgram } = require('@solana/web3.js');
const { Program, AnchorProvider, Wallet } = require('@project-serum/anchor');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken'); // For JWT authentication
const mongoose = require('mongoose');
const crypto = require('crypto');
const axios = require('axios');
const fs = require('fs');
const { getDistance } = require('geolib');
const anchor = require('@project-serum/anchor');
const cors = require('cors'); // Import cors

const app = express(); // Initialize app here
const server = http.createServer(app);
const wss = new WebSocket.Server({ server }); // Attach WebSocket server
app.use(cors()); // Use cors middleware after app initialization
app.use(express.json()); // Parse incoming JSON requests

// Store connected drivers
let driverClients = new Set(); // Use Set to avoid duplicates
wss.on('connection', (ws) => {
  console.log('✅ New WebSocket connection established.');
  driverClients.add(ws);
  ws.on('message', (message) => {
      console.log(`📩 Received: ${message}`);

      // Broadcast message to all connected clients
      wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
              client.send(`Broadcast: ${message}`);
          }
      });
  });

  ws.on('close', () => {
      console.log('❌ WebSocket connection closed.');
  });
});


// Constants for fare calculation
const baseFare = 50;
const perKmFare = 15;
const perMinFare = 2;
const additionalCharges = 10;

// Solana connection setup
const connection = new Connection(process.env.SOLANA_CLUSTER_URL, 'confirmed');
const walletKeyPair = Keypair.fromSecretKey(
  Uint8Array.from(JSON.parse(fs.readFileSync(process.env.ANCHOR_WALLET, 'utf8')))
);
const wallet = new Wallet(walletKeyPair);
const provider = new AnchorProvider(connection, wallet, AnchorProvider.defaultOptions());

// Program setup
const idl = require('./ride_sharing_backend/target/idl/ride_sharing.json');
const programId = new PublicKey(process.env.PROGRAM_ID);
const program = new Program(idl, programId, provider);

// MongoDB models
const UserSchema = new mongoose.Schema({
  publicKey: String,
  encryptedPrivateKey: String,
  userType: { type: String, },
  name: String,
  contact: String,
  password: String,
  email: { type: String, required: true },
  bikeNumber: String,
  licenseNumber: String,
  passwordChanged: { type: Boolean, default: true },
});
const User = mongoose.model('User', UserSchema);

const RideSchema = new mongoose.Schema({
  rideId: String,
  rider: String,
  driver: String,
  fare: Number,
  status: String,
  pickup: { lat: Number, lng: Number },
  drop: { lat: Number, lng: Number },
  startTime: Date,
  endTime: Date,
  distance: Number,
  duration: Number,
  
});
const Ride = mongoose.model('Ride', RideSchema);

// MongoDB connection
mongoose.connect(process.env.MONGO_URI);
mongoose.connection.on('open', () => console.log('🚀 MongoDB connected successfully.'));
mongoose.connection.on('error', (err) => console.error('❌ MongoDB connection error:', err));

// Encryption Helpers
const ENCRYPTION_KEY = crypto.createHash('sha256').update(String(process.env.ENCRYPTION_KEY)).digest('base64').substr(0, 32);
const IV_LENGTH = 16;

function encrypt(text) {
  const iv = crypto.randomBytes(IV_LENGTH);
  const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);
  let encrypted = cipher.update(text);
  encrypted = Buffer.concat([encrypted, cipher.final()]);
  return iv.toString('hex') + ':' + encrypted.toString('hex');
}

function decrypt(text) {
  const textParts = text.split(':');
  const iv = Buffer.from(textParts.shift(), 'hex');
  const encryptedText = Buffer.from(textParts.join(':'), 'hex');
  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);
  let decrypted = decipher.update(encryptedText);
  decrypted = Buffer.concat([decrypted, decipher.final()]);
  return decrypted.toString();
}

// JWT Secret Key
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';

// Driver Pool: Store available drivers with their locations
const driverPool = [];

// Function to calculate fare based on distance and duration
function calculateFare(pickup, drop, duration) {
  const distance = getDistance(pickup, drop) / 1000; // Convert to kilometers
  return baseFare + distance * perKmFare + duration * perMinFare + additionalCharges;
}

// **Register a User (Driver or Rider)**
app.post('/register', async (req, res) => {
  try {
    const { name, contact, userType, password, email } = req.body;

    const keypair = Keypair.generate();
    const publicKey = keypair.publicKey.toString();
    const privateKey = Array.from(keypair.secretKey);

    const encryptedPrivateKey = encrypt(JSON.stringify(privateKey));
    const hashedPassword = await bcrypt.hash(password, 10);

    const user = new User({
      name,
      contact,
      userType,
      password: hashedPassword,
      email,
      
      publicKey,
      encryptedPrivateKey,
    });

    await user.save();

    if (userType === 'Driver') {
      driverPool.push({ publicKey, location: null }); // Add the driver to the pool
    }

    res.status(201).json({
      message: 'User registered successfully',
      publicKey,
    });
  } catch (error) {
    console.error('Error registering user:', error);
    res.status(500).json({ message: 'Failed to register user', error: error.message });
  }
});

// login endpoint

app.post('/login', async (req, res) => {
  try {
    const { username, number, password } = req.body;

    // Validate request
    if ((!username && !number) || !password) {
      return res
        .status(400)
        .json({ message: 'Username/contact and password are required' });
    }

    // Determine if the identifier is username or contact
    const identifier = username || number;
    console.log('Identifier provided for login:', identifier);

    // Search for the user by 'name' or 'contact'
    const users = await User.find({
      $or: [{ name: identifier }, { contact: identifier }],
    });

    // Handle cases where multiple accounts are found
    if (users.length > 1) {
      return res
        .status(400)
        .json({ message: 'Multiple accounts found. Please contact support.' });
    }

    const user = users[0]; // Take the first user from the array

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Compare passwords
    const isMatch = await bcrypt.compare(password, user.password);
    console.log('Password Match:', isMatch);

    if (!isMatch) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // ✅ Check if password was reset but not changed by the user
    const forceChangePassword = user.passwordChanged === false; 

    // Generate JWT token
    const token = jwt.sign(
      { id: user._id, publicKey: user.publicKey, userType: user.userType, forceChangePassword },
      process.env.JWT_SECRET || 'your_jwt_secret',
      { expiresIn: '1h' }
    );

    // Respond with required fields
    res.status(200).json({
      message: 'Login successful',
      token, // Send the JWT token
      userType: user.userType, // Send user type
      publicKey: user.publicKey, 
      passwordChanged: user.passwordChanged,// Send public key
      forceChangePassword, // ✅ Send this flag to frontend
    });
  } catch (error) {
    console.error('Error during login:', error);
    res.status(500).json({ message: 'Failed to login', error: error.message });
  }
});


// **Function to decrypt the encrypted private key and return keypair**
function getKeypairFromEncrypted(encryptedPrivateKey) {
  const decryptedPrivateKey = decrypt(encryptedPrivateKey); // Decrypt the encrypted key
  const privateKeyArray = JSON.parse(decryptedPrivateKey); // Parse the decrypted private key
  return Keypair.fromSecretKey(Uint8Array.from(privateKeyArray)); // Return the keypair
}

// **Create a Ride**
app.post('/create-ride', async (req, res) => {
  try {
    const { riderPublicKey, pickup, drop, startTime, endTime } = req.body;

    if (!riderPublicKey || !pickup || !drop || !startTime || !endTime) {
      return res.status(400).json({ message: 'Invalid request body. Missing required fields.' });
    }

    // Fetch the rider
    const rider = await User.findOne({ publicKey: riderPublicKey, userType: 'Rider' });
    if (!rider) {
      return res.status(404).json({ message: 'Rider not found' });
    }

    const riderKeypair = getKeypairFromEncrypted(rider.encryptedPrivateKey);
    const uniqueId = Date.now();
    const MAX_DISTANCE_KM = 17.5;

    // Calculate distance (in kilometers)
    const distance = getDistance(pickup, drop) / 1000; // Distance in kilometers
    if (distance < 1) {
      return res.status(400).json({ message: "Ride request rejected. Distance must be at least 1 km.",
        distance: distance.toFixed(2)
       });
      
    }
    if (distance > MAX_DISTANCE_KM) {
      return res.status(400).json({ message: "Ride request rejected. Distance must be at least 17.5 km.",
        distance: distance.toFixed(2)
      });
    }
    // Assuming average speed for calculating duration (15 km/h as an example)
    const speedInKmPerHour = 15.0; // km/h
    const durationInHours = distance / speedInKmPerHour; // Duration in hours
    const durationInMinutes = durationInHours * 60;  // Convert to minutes

    // Calculate fare based on distance and duration
    const fare = calculateFare(pickup, drop, durationInMinutes);

    // Create the ride
    const [rideAccountPublicKey, bump] = await PublicKey.findProgramAddress(
      [
        Buffer.from('ride'),
        riderKeypair.publicKey.toBuffer(),
        Buffer.from(new anchor.BN(uniqueId).toArray('le', 8)),
      ],
      program.programId
    );

    await program.rpc.createRide(
      new anchor.BN(uniqueId),
      new anchor.BN(fare),
      new anchor.BN(distance),
      {
        accounts: {
          ride: rideAccountPublicKey,
          rider: riderKeypair.publicKey,
          systemProgram: SystemProgram.programId,
        },
        signers: [riderKeypair],
      }
    );

    // Save ride to the database
    const newRide = new Ride({
      rideId: rideAccountPublicKey.toString(),
      rider: riderKeypair.publicKey.toString(),
      driver: null,
      fare,
      status: 'Requested',
      pickup,
      drop,
      startTime,
      endTime,
      distance,
      duration: durationInMinutes,  // Store duration in minutes in DB
    });
    await newRide.save();

// Broadcast new ride to all connected drivers
if (driverClients.size > 0) {
  console.log(`📢 Broadcasting ride to ${driverClients.size} drivers...`);
  const rideData = JSON.stringify({
    event: 'newRide',
    
    ride: {
      rideId: newRide.rideId,
      rider: newRide.rider, // ✅ Ensure rider is included
      pickup: {
        lat: newRide.pickup.lat,
        lng: newRide.pickup.lng
      },
      drop: {
        lat: newRide.drop.lat,
        lng: newRide.drop.lng
      },
      fare: newRide.fare,
      distance: newRide.distance,  // ✅ Ensure this is sent
      duration: newRide.duration, 
      status: newRide.status
    }
  });
  console.log("📢 Sending New Ride to Drivers:", rideData);

  driverClients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(rideData);
    }
  });

  console.log("✅ Ride broadcasted to all connected drivers.");
} else {
  console.log("🚨 No drivers are connected to receive ride updates.");
}

    // Send back the ride data including fare, distance, and duration
    res.status(201).json({
      message: 'Ride created successfully',
      ride: newRide,
      fare: fare,  // Fare sent back in the response
      duration: durationInMinutes,  // Duration sent back in the response
    });
  } catch (error) {
    console.error('Error creating ride:', error);
    res.status(500).json({ message: 'Failed to create ride', error: error.message });
  }
});

// **Get Route**
app.post('/get-route', async (req, res) => {
  const { origin, destination } = req.body;

  try {
    const url = `https://router.project-osrm.org/route/v1/driving/${origin.longitude},${origin.latitude};${destination.longitude},${destination.latitude}?overview=full&geometries=geojson`;

    // Fetch the route from OSRM
    const response = await axios.get(url);
    
    // Ensure the route exists in the response
    if (response.data && response.data.routes && response.data.routes.length > 0) {
      // Extract the coordinates from the OSRM response
      let coordinates = response.data.routes[0].geometry.coordinates;
      coordinates = coordinates.map(coord => [
        parseFloat(coord[0].toFixed(4)), // Round longitude to 3 decimal places
        parseFloat(coord[1].toFixed(4))  // Round latitude to 3 decimal places
      ]);
    /*  console.log("Route coordinates:", coordinates);

      const newRide = new Ride({
        rideId: "generatedRideId", // This would come from somewhere else in your logic
        pickup: origin,
        drop: destination,
        routeCoordinates: coordinates,  // Save the coordinates to the ride data
        status: 'Requested',
        // add other ride details here like fare, distance, etc.
      });
      await newRide.save();*/
      // Send back the coordinates as a list
      res.status(200).json({ route: coordinates });
    } else {
      res.status(500).json({ message: 'No route found' });
    }
  } catch (error) {
    console.error('Error fetching route:', error.message);
    res.status(500).json({ message: 'Error fetching route', error: error.message });
  }
});


// **Get Available Rides**
app.get('/get-available-rides', async (req, res) => {
  try {
    const rides = await Ride.find({ status: 'Requested' }); // Fetch rides with status 'Requested'
    res.status(200).json(rides);
  } catch (error) {
    console.error('Error fetching available rides:', error);
    res.status(500).json({ message: 'Failed to fetch available rides', error: error.message });
  }
});


// **Get Ride Status**
app.get("/ride-status", async (req, res) => {
  try {
      const { riderPublicKey } = req.query;
      if (!riderPublicKey) {
          return res.status(400).json({ message: "Missing riderPublicKey in request" });
      }

      // ✅ 1️⃣ Check for Active Ride in `rides` collection
      let ride = await Ride.findOne({ rider: riderPublicKey }).sort({ _id: -1 });  // Sort by most recent `_id`

      // ✅ 2️⃣ Fetch the latest ride from `cancelledrides` & `completedrides`
      const latestCancelledRide = await mongoose.connection.db.collection("cancelledrides")
          .find({ rider: riderPublicKey })
          .sort({ _id: -1 })  // ✅ Sorting by `_id` to get the latest ride
          .limit(1)
          .toArray();

      const latestCompletedRide = await mongoose.connection.db.collection("completedrides")
          .find({ rider: riderPublicKey })
          .sort({ _id: -1 })  // ✅ Sorting by `_id` to get the latest ride
          .limit(1)
          .toArray();

      // ✅ 3️⃣ Ensure we always get the **most recent ride**
      let latestRide = null;
      if (latestCancelledRide.length > 0 && latestCompletedRide.length > 0) {
          latestRide = latestCancelledRide[0]._id.getTimestamp() > latestCompletedRide[0]._id.getTimestamp()
              ? latestCancelledRide[0]
              : latestCompletedRide[0];
      } else if (latestCancelledRide.length > 0) {
          latestRide = latestCancelledRide[0];
      } else if (latestCompletedRide.length > 0) {
          latestRide = latestCompletedRide[0];
      }

      // ✅ 4️⃣ Choose the most recent ride (active > cancelled > completed)
      if (!ride || (latestRide && latestRide._id.getTimestamp() > ride._id.getTimestamp())) {
          ride = latestRide;
      }

      if (!ride) {
          return res.status(404).json({ message: "No active, completed, or cancelled ride found for rider" });
      }

      console.log(`✅ Returning latest ride status: ${ride.rideId} - ${ride.status}`);
      wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
                event: 'rideStatusUpdated',
                rideId: ride.rideId,
                status: ride.status,
                driver: ride.driver || "No Driver Assigned"
            }));
        }
    });
      res.status(200).json({
          rideId: ride.rideId,
          status: ride.status,
          driver: ride.driver || "No Driver Assigned",
      });

  } catch (error) {
      console.error("❌ Error fetching ride status:", error);
      res.status(500).json({ message: "Internal Server Error" });
  }
});

// **Accept a Ride**
// Accept a Ride and store time to reach
app.post('/accept-ride', async (req, res) => {
  try {
    const { rideId, driverPublicKey, timeToReach } = req.body; // Expect time to reach to be sent from the driver

    // Find the ride in the database
    const ride = await Ride.findOne({ rideId });
    if (!ride) {
      return res.status(404).json({ message: 'Ride not found' });
    }

    // Update the ride with driver info and time to reach
    ride.driver = driverPublicKey;
    ride.status = 'Accepted';
    ride.timeToReach = timeToReach; // Save the time to reach
    await ride.save();

    // Send WebSocket message about the ride acceptance
    wss.clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({
          event: 'rideAccepted',
          ride: {
            rideId: ride.rideId,
            driverPublicKey: ride.driver,
            driver: ride.driver, 
            status: ride.status,
            timeToReach: ride.timeToReach
          }
        }));
      }
    });

    res.status(200).json({ message: 'Ride accepted successfully', ride });
  } catch (error) {
    console.error('Error accepting ride:', error);
    res.status(500).json({ message: 'Failed to accept ride', error: error.message });
  }
});

// **Complete a Ride**
app.post('/complete-ride', async (req, res) => {
  try {
    const { rideId } = req.body;

    if (!rideId) {
      return res.status(400).json({ message: 'Ride ID is required' });
    }

    // ✅ Find the ride from `rides` collection
    const ride = await Ride.findOne({ rideId });
    if (!ride) {
      return res.status(404).json({ message: 'Ride not found' });
    }

    // ✅ Change ride status to 'Completed'
    ride.status = 'Completed';

    // ✅ Define the `completedrides` collection using the same schema
    const CompletedRide = mongoose.model('CompletedRide', RideSchema, 'completedrides');

    // ✅ Save the ride to `completedrides` collection
    await CompletedRide.create(ride.toObject());  // Convert document to plain object

    // ✅ Remove the ride from the `rides` collection
    await Ride.deleteOne({ rideId });

    console.log(`✅ Ride ${rideId} moved to completedrides`);
    wss.clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({
          event: 'rideCompleted',  // New event for completed ride
          rideId: ride.rideId,     // Send ride ID and status
          status: ride.status,
        }));
      }
    });
    res.status(200).json({ message: 'Ride completed successfully', ride });

  } catch (error) {
    console.error('❌ Error completing ride:', error);
    res.status(500).json({ message: 'Failed to complete ride', error: error.message });
  }
});



// **Cancel a Ride**

app.post('/cancel-ride', async (req, res) => {
  try {
      const { rideId } = req.body;
      if (!rideId) {
          return res.status(400).json({ message: 'Ride ID is required' });
      }

      // ✅ Find the ride in `rides` collection
      const ride = await Ride.findOne({ rideId });
      if (!ride) {
          return res.status(404).json({ message: 'Ride not found' });
      }

      // ✅ Explicitly set status to "Cancelled"
      ride.status = "Cancelled";

      // ✅ Save ride to `cancelledrides` collection
      const CancelledRide = mongoose.model('CancelledRide', RideSchema, 'cancelledrides');
      await CancelledRide.create(ride.toObject());

      // ✅ Remove ride from `rides` collection
      await Ride.deleteOne({ rideId });

      console.log(`✅ Ride ${rideId} moved to cancelledrides and status updated to "Cancelled"`);
      
      wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({
            event: 'rideCancelled',  // New event for cancelling the ride
            rideId: ride.rideId,     // Send ride ID and status
            status: ride.status,
          }));
        }
      });

      res.status(200).json({ message: 'Ride cancelled successfully', ride });

  } catch (error) {
      console.error('❌ Error cancelling ride:', error);
      res.status(500).json({ message: 'Failed to cancel ride', error: error.message });
  }
  
});

// **Mark the driver as "Reached"**
app.post('/mark-reached', async (req, res) => {
  try {
    const { rideId, driverPublicKey } = req.body;

    // Ensure the necessary fields are provided
    if (!rideId || !driverPublicKey) {
      return res.status(400).json({ message: 'Missing required fields' });
    }

    // Find the ride in the database
    const ride = await Ride.findOne({ rideId });
    if (!ride) {
      return res.status(404).json({ message: 'Ride not found' });
    }

    // Check if the driver is the one who accepted the ride
    if (ride.driver !== driverPublicKey) {
      return res.status(403).json({ message: 'This ride is not assigned to you' });
    }

    // Update the ride status to "Driver Reached"
    ride.status = 'Driver Reached';
    await ride.save();
  // Notify the rider via WebSocket
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify({
        event: 'driverReached',
        ride: ride,  // Send the updated ride information

      }));
    }
  });
    // Respond with the updated ride data
    res.status(200).json({
      message: 'Ride status updated to "Driver Reached"',
      ride: ride,
    });
  } catch (error) {
    console.error('Error marking ride as reached:', error);
    res.status(500).json({ message: 'Failed to update ride status', error: error.message });
  }
});

app.post('/driver-reached', async (req, res) => {
  const { rideId } = req.body;
  
  try {
    // Update the status in the database to "Driver Reached"
    const ride = await Ride.findOne({ rideId });
    if (!ride) {
      return res.status(404).json({ message: 'Ride not found' });
    }
    
    ride.status = 'Driver Reached';
    await ride.save();

    res.status(200).json({ message: 'Driver reached status updated successfully' });

    // You may want to notify the rider through a push notification or WebSocket here.
  } catch (error) {
    console.error('Error updating ride status:', error);
    res.status(500).json({ message: 'Failed to update ride status' });
  }
});



// **Start the Server**
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));

const nodemailer = require('nodemailer');


// Adjust the path based on your file structure

app.post('/reset-password', async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ message: 'Email is required' });
    }

    // Find the user in the database by email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Generate a random password (for simplicity, let's just generate a 10-character random string)
    const randomPassword = Math.random().toString(36).slice(-10);  // Random 10-char string

    // Hash the new random password
    const hashedPassword = await bcrypt.hash(randomPassword, 10);

    // Update the user's password in the database
    user.password = hashedPassword;
    user.passwordChanged=false;
    await user.save();

    console.log(`New password generated for ${email}: ${randomPassword}`);  // Log the new password for debug

    // Send the new password to the user's email
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,  // Your email address
        pass: process.env.EMAIL_PASS,  // Your email password or App password
      },
      debug: true,  // Enable debug logs for Nodemailer
      logger: true,  // Log detailed transport logs for debugging
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'Password Reset Request',
      text: `Your new password is: ${randomPassword}`, // This is the random password you generate
    };

    // Send email
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('Error sending email:', error);
        return res.status(500).json({ message: 'Failed to send reset email', error: error.message });
      } else {
        console.log('Email sent:', info.response);
        return res.status(200).json({ message: 'Password reset link sent to your email' });
      }
    });

  } catch (error) {
    console.error('Error during password reset:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});


app.post('/change-password', async (req, res) => {
  try {
    const { username, newPassword } = req.body;

    if (!username || !newPassword) {
      return res.status(400).json({ message: 'Username and new password are required' });
    }

    const user = await User.findOne({ name: username });

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Hash the new password
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // ✅ Update password and mark as changed
    user.password = hashedPassword;
    user.passwordChanged = true; // ✅ Mark password as changed
    await user.save();

    res.status(200).json({ message: 'Password updated successfully' });

  } catch (error) {
    console.error('Error updating password:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

ayush abcasd